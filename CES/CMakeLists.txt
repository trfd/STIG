CMAKE_MINIMUM_REQUIRED (VERSION 3.0)

###
## Append Module Path
### 
LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake_config")


###
## Load CMExt 
### 

IF(EXISTS ${CMAKE_SOURCE_DIR}/CMExt.cmake)
	INCLUDE(${CMAKE_SOURCE_DIR}/CMExt.cmake)
ELSE()
	MESSAGE(FATAL_ERROR "CMake Extention file (CMExt.cmake) not found ")
ENDIF()

IF(NOT CMEXT_INCLUDED)
	MESSAGE(FATAL_ERROR "CMExt.cmake not included and required")
ENDIF()

###
## Project
###

PROJECT(CES)

###
## Libraries
###

FIND_PACKAGE(Lua REQUIRED)

FIND_PACKAGE(SWIG REQUIRED)
INCLUDE(${SWIG_USE_FILE})

FIND_PACKAGE( Boost COMPONENTS system filesystem REQUIRED )
#ENABLE_TESTING()
FIND_PACKAGE(GTest REQUIRED)

INCLUDE_DIRECTORIES()

MESSAGE("Boost libraries: ${Boost_LIBRARIES}")
SET(CMAKE_SWIG_FLAGS "")

###
## Compilation Flags
###

set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++0x")
set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY           "libc++")
set(CMAKE_CXX_FLAGS                                   "${CMAKE_CXX_FLAGS} -std=c++0x")

IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/EHsc")
ENDIF(MSVC)

## Disable RTTI
IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-rtti")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
  SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "${CMAKE_CXX_FLAGS} /GR-")
ELSE()
	MESSAGE(FATAL_ERROR "Unsupported compiler ${CMAKE_CXX_COMPILER_ID}")
ENDIF()

###
## Configure Files
###

###
## Outputs
###

SET(BIN_DIR ${CMAKE_SOURCE_DIR}/build/bin)
SET(LIB_DIR ${CMAKE_SOURCE_DIR}/build/lib)

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY         ${LIB_DIR})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${LIB_DIR})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${LIB_DIR})

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY         ${BIN_DIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${BIN_DIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${BIN_DIR})

###
## Setup
###

SET(INCLUDE_DIRS 
	${Boost_INCLUDE_DIRS}
	${GTEST_INCLUDE_DIRS}
	${LUA_INCLUDE_DIR})

###
## Modules
###

## Add Module CES

CMEXT_ADD_MODULE(CES)


